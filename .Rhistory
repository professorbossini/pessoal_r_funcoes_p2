setwd("~/workspaces/pessoal/r/aula_funcoes_p2")
pi
#pode ser sobrescrita!
pi <- 5
pi
#volte ao normal removendo o valor atribuído a pi
rm(pi)
pi
pi
pi
#para conjuntos
x <- c (1, 2, 3, 4, 5); x
y <- c(3, 4, 5, 6, 7); y
union(x,y)
intersect(x,y)
#responde se são iguais
setequal(x, y)
setequal(c(1, 2), c(1, 2))
#responde se são iguais
#false
?setequal
#diferença entre conjuntos
setdiff(x, y)
setdiff(c(1, 2), 3)
setdiff(c(1, 2), c(3))
setdiff(c(1, 2), c(1, 3))
#devolve um vetor de booleanos
is.element(x, y)
#devolve um vetor de booleanos
is.element(1, 1)
#devolve um vetor de booleanos
is.element(c(1, 2), 1)
#devolve um vetor de booleanos
is.element(c(1, 2), c(1))
#devolve um vetor de booleanos
is.element(c(1, 2), c(1, 2))
#devolve um vetor de booleanos
is.element(c(1), c(1, 2))
is.element(c(1, 2, 3), c(1))
##################################################
#funções estatísticas
x <- 1:5;x
mean(x)
#desvio padrão
sd(x)
#correlação
cor((1:100))
#correlação
cor(x, x)
#correlação
cor(x, x - 1)
cor ((1:100)^2, log(1:100))
cor (c(1, 2, 3), c (10, 53, 4))
##################################################
#funções probabilísticas
?runif
#vinte observações no intervalo [0, 10]
runif(20, min=0, max=10)
#vinte observações reais no intervalo [0, 10]
runif(20, min=0, max=10)
#vinte observações reais no intervalo [0, 10]
runif(2000000, min=0, max=10)
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(2000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(2000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(2000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(200000000000000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(200000000000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(200000000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(20000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(20000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(20000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
is.element(c(0, 10),runif(20000000, min=0, max=10))
#vinte observações reais no intervalo [0, 10]
(is.element(c(0, 10),runif(20000000, min=0, max=10))
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
#vinte observações, distribuição normal
rnorm(20, mean=0, sd=10)
sample(5)
sample(5)
sample(5)
sample(5)
sample(5)
?sample
#uma permutação envolvendo o intervalo 1:5
sample(5)
#uma permutação envolvendo o intervalo 1:5
sample(5)
#uma permutação envolvendo o intervalo 1:5
sample(5)
#uma permutação envolvendo o intervalo 1:5
sample(5)
sample(1:10)
sample(1:10)
sample(1:10)
#permutação intervalo 1:10
sample(1:10)
#permutação intervalo 1:10
sample(1:10)
#com reposição
sample(1:10, replace=T)
#com reposição
sample(1:10, replace=T)
#com reposição
sample(1:10, replace=T)
#com reposição
sample(1:10, replace=T)
#especificando quantidade
sample(1:10, 6, replace=T)
#especificando quantidade
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=F)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:10, 6, replace=T)
#especificando quantidade, com reposição
sample(1:100, 6, replace=T)
#especificando quantidade, com reposição
sample(1:100, 6, replace=T)
##################################################
x <- "Universidade Teste"
y <- "Análise de dados"
#número de caracteres de cada string
nchar(x, y)
#número de caracteres de cada string
nchar(c(x,y))
##################################################
x <- "1 1"
#número de caracteres de cada string
nchar(c(x,y))
##################################################
x <- "Universidade Teste"
y <- "Análise de dados"
#número de caracteres de cada string
nchar(c(x,y))
#quebra usando um símbolo especificado
strsplit(c(x, y), split = " ")
##################################################
x <- "Hello, Strings"
y <- "Análise de dados"
#número de caracteres de cada string
nchar(c(x,y))
#quebra usando um símbolo especificado
strsplit(c(x, y), split = " ")
#substring
(x, start=2, stop, 4)
#substring
substr(x, start=2, stop, 4)
#substring
substr(x, start=2, stop, 4)
#substring
substr(x, start=2, stop=4)
#substring
#ell
substr(x, start=2, stop=2)
#substring
#ell
substr(x, start=2, stop=1)
#substring
#ell
substr(x, start=2, stop=4)
#e
substr(x, start=2, stop=2)
substr(x, start=2, stop=1)
substr(x, start=-1)
substr(x, start=-1, stop=2)
substr(x, start=-1, stop=-22)
substr(x, start=-1, stop=-2)
substr(x, start=-1, stop=10)
substr(x, start=1, stop=10)
substr(x, start=-1, stop=10)
substr(x, start=-1, stop=-10)
substr(x, start=1, stop=-10)
substr(x, start=-1, stop=-1)
substr(x, start=-1, stop=2)
substr(x, start=-2, stop=2)
substr(x, start=-12, stop=2)
#qualquer valor negativo faz começar do 1
substr(x, start=-1, stop=2)
substr(x, start=-12, stop=2)
#se start=0, começa do 1 mesmo assim
substr(x, start=0, stop=5)
?chartr
#substituição de caracteres
#tr: translate
chartr('hs', 'HS', 'hello, strings')
#substituição de caracteres
#tr: translate
chartr('hs', 'HS', 'hello, R')
#substituição de caracteres
#tr: translate
chartr('hs', 'HS', 'hello, String')
#substituição de caracteres
#tr: translate
chartr('hs', 'HS', 'hello, strings')
?strtrim
#recebe um vetor e um valor inteiro de "width"
#width é a largura
strtrim("ABC", 2)
strtrim("全角", 2)
#全角: largura completa
#半角: metade do tamanho
strtrim("全角", 1)
#全角: largura completa
#半角: metade do tamanho
strtrim("全角", 2)
#全角: largura completa
#半角: metade do tamanho
strtrim("全角", 3)
#全角: largura completa
#半角: metade do tamanho
strtrim("全角", 4)
#全角: largura completa
#半角: metade do tamanho
strtrim("全角", 1)
strtrim("半角", 1)
strtrim("半角", 2)
strtrim('ﾣ', 1)
strtrim('￥', 2)
strtrim('￥', 1)
#mostra ￥
strtrim('￥', 2)
#mostra ﾣ pois ele é half width
strtrim('ﾣ', 1)
#mostra a cadeia vazia pois ele é full width
strtrim('￥', 1)
#mostra ￥
strtrim('￥', 2)
#letras maiúsculas e minúsculas
touppper('Hello, Strings')
#letras maiúsculas e minúsculas
toupper('Hello, Strings')
tolower("Hello, Strings")
toTitleCase('Oi')
tools::toTitleCase('Oi')
#Title Case
tools::toTitleCase('josé da silva')
toTitleCase("maria silva")
#também dá pra fazer assim
library(tools)
toTitleCase("maria silva")
?sub
sub("a", "*", "Ana Maria")
?gsub
#globalsub: substitui todos
gsub("a", "*", "Ana Maria")
#An* M*ri*
gsub("a", "*", "Ana Maria")
?grep
grep("Dados", c(x, "USJT", y))
grep("a", "Ana Maria")
grep("a", "f")
grep("a", "Ana Maria")
grep("a", "bna Maria")
grep("a", "bna Maria")
grepl("a", "bna Maria")
l
grep("a", "bna Maria")
grep("a", "bna Maria")
grep("a", "bna Maria")
grep("[a-z]", "bna Maria")
##################################################
#Funções lógica
x <- c (F, T, F);x
any(x)
#todos em x resultam em TRUE?
all(x)
##################################################
#Funções lógicas
x <- c(T, F)
y <- c(T, T)
#alguém resulta em TRUE?
#TRUE
any(x)
#alguém resulta em TRUE?
#TRUE
any(x, y)
#alguém resulta em TRUE?
#TRUE
any(x)
#alguém resulta em TRUE?
#TRUE
any(c(x, y))
#alguém resulta em TRUE?
#TRUE
any(x)
#TRUE
any(y)
#FALSE
any(z)
z <- c(F, F)
#FALSE
any(z)
#todos resultam em T?
#FALSE
all(x)
#T
all(y)
#F
all(z)
arq <- read.table(file = "cancer.txt", header = T);arq
#################################################################
#2. Faça o histograma das variáveis LDH, ALB e N. Use a descrição da coluna como título de cada um. Use cores diferentes.
#parâmetro para os gráficos
#disposição de uma linha e três coluna (mfrow: posicionamento da esquerda para a direita. Se usar mfcol: posicionamento de cima para baixo)
par(mfrow = c(1,3))
#volta configurações de gráfico ao normal
par(mfrow = c(1, 1))
hist(arq[, 'LDH'], main = 'Enzima, lactate dehydrogenase', xlab = 'LDH', ylab = 'frequência absoluta', col = 'red')
hist(arq[, 'ALB'], main = 'Albumina', xlab = 'ALB', ylab = 'frequência absoluta', col = 'blue')
#################################################################
#2. Faça o histograma das variáveis LDH, ALB e N. Use a descrição da coluna como título de cada um. Use cores diferentes.
#parâmetro para os gráficos
#disposição de uma linha e três coluna (mfrow: posicionamento da esquerda para a direita. Se usar mfcol: posicionamento de cima para baixo)
par(mfrow = c(1,3))
hist(arq[, 'LDH'], main = 'Enzima, lactate dehydrogenase', xlab = 'LDH', ylab = 'frequência absoluta', col = 'red')
hist(arq[, 'ALB'], main = 'Albumina', xlab = 'ALB', ylab = 'frequência absoluta', col = 'blue')
hist(arq[, 'LDH'], main = 'Enzima, lactate dehydrogenase', xlab = 'LDH', ylab = 'frequência absoluta', col = 'red')
hist(arq[, 'ALB'], main = 'Albumina', xlab = 'ALB', ylab = 'frequência absoluta', col = 'blue')
hist(arq[, 'N'], main = 'Nitrogênio na uréia', xlab = 'N', ylab = 'frequência absoluta', col = 'green')
#################################################################
#2. Faça o histograma das variáveis LDH, ALB e N. Use a descrição da coluna como título de cada um. Use cores diferentes.
#parâmetro para os gráficos
#disposição de uma linha e três coluna (mfrow: posicionamento da esquerda para a direita. Se usar mfcol: posicionamento de cima para baixo)
par(mfrow = c(1,3))
hist(arq[, 'LDH'], main = 'Enzima, lactate dehydrogenase', xlab = 'LDH', ylab = 'frequência absoluta', col = 'red')
hist(arq[, 'ALB'], main = 'Albumina', xlab = 'ALB', ylab = 'frequência absoluta', col = 'blue')
hist(arq[, 'N'], main = 'Nitrogênio na uréia', xlab = 'N', ylab = 'frequência absoluta', col = 'green')
hist(arq[, 'LDH'], main = 'Enzima, lactate dehydrogenase', xlab = 'LDH', ylab = 'frequência absoluta', col = 'red')
hist(arq[, 'ALB'], main = 'Albumina', xlab = 'ALB', ylab = 'frequência absoluta', col = 'blue')
hist(arq[, 'N'], main = 'Nitrogênio na uréia', xlab = 'N', ylab = 'frequência absoluta', col = 'green')
#volta configurações de gráfico ao normal
par(mfrow = c(1, 1))
#3. Médicos afirmam que o grupo dos falso-positivos é mais jovem do que o dos falso negativos. O que você diria a respeito? Justifique sua resposta baseando-se em gráficos e medidas de tendência central.
par(mfrow = c(1, 3))
par(mfrow = c(1, 1))
#3. Médicos afirmam que o grupo dos falso-positivos é mais jovem do que o dos falso negativos. O que você diria a respeito? Justifique sua resposta baseando-se em gráficos e medidas de tendência central.
par(mfrow = c(1, 2))
boxplot(arq[arq$Grupo==4, 'Idade'], main = 'Falso positivo', ylab = 'Idade', col = 'lightblue')
#idade de falsos negativos
boxplot(arq[arq$Grupo==1, 'Idade'], main = 'Falso negativo', ylab = 'Idade', col = 'lightgreen')
#pelos boxplots, vemos que a mediana de falso negativos é maior do que a de falsos positivos
#resumo de idade de falsos positivos
summary(arq[arq$Grupo==4, 'Idade'])
summary(arq[arq$Grupo==1, 'idade'])
summary(arq[arq$Grupo==1, 'Idade'])
#pelos boxplots, vemos que a mediana de falso negativos é maior do que a de falsos positivos
#resumo de idade de falsos positivos
summary(arq[arq$Grupo==4, 'Idade']) #Média:
summary(arq[arq$Grupo==1, 'Idade']) #Média:
#Observe que tanto mediana quanto média de falsos negativos é maior
#Assim os falsos positivos são mais jovens
#################################################################
#4. Compare a glicose dos pacientes falso positivos e dos falso negativos. Para
#isso, use a média, a mediana, a variância e o desvio padrão. O que você conclui?
#glicose de falsos positivos
gfp <- arq[arq$Grupo==4, 'GL'];gfp
#glicose de falsos negativos
gfn <- arq[arq$Grupo==1, 'GL'];gfn
par(mfrow = c(1, 1))
summary(gfp)
sprintf('Falsos Positivos:
fwea')
sprintf(r'Falsos Positivos:
fwea')
sprintf(e'Falsos Positivos:
fwea')
sprintf(e'Falsos Positivos: \\n
fwea')
sprintf(e'Falsos Positivos: \\n
fwea')
sprintf(e'Falsos Positivos: \\n       fwea')
sprintf('Falsos Positivos: \\n
fwea')
sfp <- sprintf('Falsos Positivos: \\n
fwea')
cat(sfp)
sfp <- sprintf('Falsos Positivos:
fwea')
cat(sfp)
sfp <- sprintf('Falsos Positivos:\nfwea')
cat(sfp)
sprintf('Falsos Positivos:\nfwea')
sfp <- sprintf('Resultados\nMédia(gfp): %.2f\nMédia(gfn): %.2f\nMediana(gfp): %.2f\nMediana(gfn): %.2f\nVariância(gfp): %.2f\nVariância(gfn): %.2f\nDesvio padrão(gfp): %.2f\nDesvio padrão(gfn): %.2f\n', mean(gfp), mean(gfn), median(gfp), median(gfn), var(gfp), var(gfn), sd(gfp), sd(gfn))
#para pular linha com \n
cat(sfp)
